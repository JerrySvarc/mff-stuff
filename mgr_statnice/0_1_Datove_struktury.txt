- Datové struktury I (NTIN066)
    - Vyhledávací stromy ((a,b)-stromy, Splay stromy)
    - Haldy (regulární, binomiální).
    - Hašování, řešení kolizí, univerzální hašování, výběr hašovací funkce
    - Analýza nejhoršího, amortizovaného a očekávaného chování datových struktur
    - Chování a analýza datových struktur na systémech s paměťovou hierarchií.

Hashing, collision [Božovský] 9/2021
I wrote down what is hashing, the universe and brackets, then he asked why we need hashing. I said for fast find, then he corrected me with one sentence. We move on to definition of c-univsal hashing, I wrote down the expected length of the chain for c-universal with the proof. He seems doesn't care about the proof. Then I said the worst case complexity of chaining (insert, find, delete), one sentence of mentioning the amortized complexity. Definitions of the scalar product hash function to hash vector and linear hash function. He seems happy when I speaking about those definitions. Then I proceed to Cuckoo hashing, what is the disadvantage and the insert/find work. He wants to listen how delete works, with his hint I correct it. Then I wrote down how linear probing works, the disadvantage (make cluster thus may has long sequence), operations(insert,find,delete). He has no further questions. Grade 1.

Datovky [Gregor]
Hesovanie. Chcel univerzalne a prehlad metod (mal som kukackove, separovane a linerne pridavanie). Dost sa v tom rypal, hlavne definicie, odhady casov a systemy funkcii na take odhady potrebne. Zistoval, ci tomu rozumiem a kladol pomerne neprijemne otazky, ale cely cas navadzal a daval priklady, kde sa to dalo celkom fajn vysvetlit. Hodne som sa trapil, odchadzal vsak so slovami, ze je spokojny.

1. [Petr Kucera] Haldy, zamerat sa na binomialne
Popisal som co je to halda, ze existuju d-regularne, binomialne, fibbonacciho. Popisal som strukturu binomialnej haldy, ako sa robia operacie, napisal som ich casove zlozitosti. Potom som popisal linou binomialnu haldu, aky je rozdiel. Skusajuci sa pytal na najhorsie a amortizovane zlozitosti operacii, najma preto, ze som to tam nemal napisane velmi prehladne. Viac do hlbky sa pytal ako presne sa robia jednotlive operacie, padla aj otazka co je amortizovana zlozitost a naznak dokazu ze insert ma amortizovanu zlozitost log n. Spomenul som len paralelu s binarnym citacom a skusajuci vyzeral spokojne.

2. Datove struktury - Vyhladavacie stromy [Majerech]
Pytal sa na interface (operacie nad VS), okrem INSERT a DELETE su dolezite aj FIND a NEXT a moznost klast intervalove dotazy.
Pytal sa este na vyvazovacie, opisal som BB-alpha.

Datove struktury [Kucera] - Haldy (zamerat sa na binomialne)
* definicie, operacie,
* amortizovana zlozitost

Datové struktury[Hric] - (a,b)-stromy
* definice
* fungovani a slozitost pro INSERT, FIND, DELETE
* kdy je chceme pouzivat
* naznak amortizace pro n insertu a delete

Datove struktury [Kucera P.] - Splay stromy
Definoval som strom, rotacie, ukazal dokazy amortizovanej zlozitosti jednotlivych rotacii a aj celej splayovania do korena. Skusajuci nemal ziadne dalsie otazky.

Datovky (Majerech + Fink): Splay stromy
Měl jsem si vybrat číslo od 1 do 5, tím se zaindexovalo do náhodné permutace, která zaindexovala do témat (ale nevím přesně, jestli to byly ty, co jsou na webu, nebo jestli nějaký subset. Otázka zněla přímo splay stromy, přičemž rovnou mi bylo řečeno, ať jestli vím nějaké aplikace, ať si je připravím.
Sepsal jsem jaké jsou operace, že splay je amort O(log n), že všechny op. musí dělat splay, protože mu to pak můžeme naúčtovat, zadefinoval potenciál, popsal rotace/dvojrotace, že u těch jedno nevýjde teleskopická suma, nějak jsem spatlal dynamickou optimalitu (znění high level), atd., prostě standardní věci. Za pár minut jsme to prošli hodně high level, technické detaily se neřešily, i když možná proto, že jsem radši proaktivně rovnou říkal věci jako že u ty L/R je ten protipříklad s nudlí apod, takže do toho moc nerejpali. Pak ale byla diskuse o tom, v čem je to lepší než hashovací tabulka, což jsem samozřejmě cucal z prstu (věci jako succ/pred), no a po nějaké době mne navedli na to, že intervalové dotazy (a že to je hlavní duvod, proč vůbec BVS chceme používat).

Datové struktury - Božovský - Haldy
Vysvětlil jsem d-regulární, binomiální a línou binomiální haldu. Popsal jak se tam provádí insert, delete-min a decrease key, a uvedl složitosti bez důkazu. Pak jsem se ještě zmínil, že existuje Fibonacciho halda.

1. Datové struktury: Splay stromy (Vladan Majerech)
Řekl jsem motivaci (manipulace s podmnožinou prvků v BST), přístup k řešení (offline - staticky opt. strom ; online - právě splay stromy), ukázal jsem co to je Splay (zig, zig-zig, zig-zag) a kde se to v tom stromě používá. Oznámil jsem, že se dá ukázat, že splay má amortizovaně logaritmickou složitost, vzhledem k velikosti podmnožiny.
~Průběh zkoušky:
Zk: Jaké jsou operace v BST
Já: find, insert, delete
Zk: Tak strukturu s takovým interfacem bych si od vás nekoupil, nemáte tam ještě něco?
Já: ? (pak po dlouhé diskusi obecně o stromech a datových strukturách a směrování ke správné odpovědi)
Já: prvek.next()
Zk: Super, škoda, že se to neinzeruje i na přednášce
...
Zk: Kdybych vás mučil, řeknete mi myšlenku důkazu analýzu složitosti.
Já: Mučit mě nemusíte (a jen slovně jsem naznačil, že uděláme analýzu jednotlivých rotací, pak analýzu i kroků a že se to tam někde teleskopicky odečte)
Zk: Tak nějak
...
Zk: Proč se (v zig-zig stepu) tahle rotace dělá tak divně?
Já: Abych se přiznal, tak přesně nevím, ale existuje na to protipříklad, kde se to rozbije
(Zk se mi snažil vysvětlit proč a pak odešel, spokojen s mým výkonem)

Datové struktury (?)
líné a zbrklé binomiální haldy
jejich definice
k čemu se používají
operace a jejich worst case a amortizovaná složitost
ukázat příklad na nějaké malé posloupnosti operací

Dátovky : Univerzálne hashovanie a výber hashovacej funkcie. (Fink)
Spísal som nejaké základné veci o hashovaní, základné spôsoby hashovania, definíciu univerzálnosti a nezávislosti, príklad univerzálneho hashovania, perfektné hashovanie a konštrukciu perfektného hashovania. Fink sa zo mňa snažil vymlátiť nejaké dôkazy - neúspešne, dal mi jeden ľahký príklad hashovacej množiny {h_a(x) = a | a patrí 1..m} a chcel aby som zanalyzoval jeho univerzálnosť a nezávislosť. V tomto som sa neskutočne zamotával na to, aké to je ľahké, ale nakoniec som to s jeho pomocou nejak doklepal. Jeho komentár k mojej skúške: "Máte to naučené, ale veľmi tomu nerozumiete, každopádne výsledná známka bude závisieť aj na ostatných častiach."

Datové struktury (Hladík) - Binomiální haldy. Včetně amortizované analýzy. Hladík si to poslechl, pak se zeptal v čem je to lepší než regulární (insert v O(1)) a to bylo tak všechno.

Datovky - Hladík - Binomiální haldy: co to je, jak to funguje, jaké operace máme, jak je to rychlé + líná varianta, amort. odhady. K čemu se haldy vlastně používají a jestli znám nějakou lepší (fib.) a krátce jak funguje, ale žádné detaily.

Datové struktury - Majerech - Haldy: Zkoušející si po "hození kostkou" mnou navrhnutým číslem přečetl dané zadání z papíru, znělo Haldy, závorka regulární a binomiální, a ty přesně chtěl. Zkoušení bylo nečekaně netechnické, stačily idei všech výpočtů hloubek. Např. u linearity konstrukce d-regulární haldy jsem řekl, jak by se počítala (suma hloubky a počtu vrcholů na dané úrovni stromu), pan Majerech se chvíli zamyslel, řekl že tomu věří pro d=2 a víc není potřeba. Chtěl jsem více mluvit o líných bin. haldách, ale nebylo potřeba.

Fink: Datové struktury -- Hashování
- chtěl obecný úvod a pak nějakou sofistikovanější metodu (v mém případě univerzální hashování). Občas jsem se v tom zamotal a zkoušející mě v tom docela drsně máchal. Byly tam potřeba i délky řetězců a počty porovnávání s odvozením, mohl jsem si ale víceméně vybrat, o čem chci mluvit.

Hashování (Kučera)
Zadání vážně znělo jenom Hashování, takže si člověk asi mohl vybrat, o čem bude psát. Já psal o metodách řešení kolizí a pak porovnával lineární přidávání a kukaččí hashování z hlediska počtu přístupů do paměti a časový náročnosti. Doplňující otázky byly na to kdy a jak přehashovat. Dozvěděl jsem se o triku s uchováváním dvou instancí tabulky, kdyby jedno přehashování mělo trvat moc dlouho (a tak se to dá dělat postupně).

5) Datové struktury – hašování (<unknown>) – problém, který hašování řeší a 1001 přístupů, jak si poradit z kolizemi (včetně perfektního a univerzálního (u obou chtěl konstrukci, ta z MITu fungovala)). Důkazy žádné nechtěl.

1) Aproximacni algoritmy (Mares) - popsal jsem maresovo veci z webu (priklad s polynomialne aprox schematem s batohem a 2-aprox obchodniho cestujiciho)

4) Datovky - Kučera - Haldy
Definice - obyčejná, d-regulární, binomiální, fibonacciho, u všech operace a cena operací, u binomiální a fibonacciho i definice potenciálu pro amort složitost. Chyběla mi amort složitost insertu na binomiální haldě a neznal jsem souvislost s amort složitostí přičítání jedničky.
Za 2.

2.Relaxované vyhledávací stromy (Majerech)
Doktor Majerech ozvláštnil výběr tím, že jste řekli číslo, on měl na papíře (perfektní) hashovací funkci a podle té zadal otázku. Já řekl 3, on na to, že to je 10 a to jsou relaxované vyhledávací stromy. Oba jsme byli trochu překvapení, ale že prý jsem se na to určitě připravoval, tak něco budu vědět. No, něco jsem asi věděl.... Začal jsem zase obecně s vyvažováním stromů a že to je overhead a že může být až logaritmický apod. Chtěl jsem to ukázat na příkladu relaxovaných červeno-černých stromů - tak jsem si zadefinoval klasické. Pak jsem vzpomenul dva typy procesů, které nad stromy pracují a něco o těch dvou typech požadavků, co se mohou vyskytovat ve frontě. A to je ve zkratce tak všechno. A mezitím bylo zkoušení a la chlupatá deka. Postupně se mu (a že se hodně snažil) ze mě podařilo vypáčit, že relaxované struktury jsou hlavně pro paralelní procesy, pak jsme debatovali o tom, jak na prd je Koubkova definice listu (NIL pointer, ale pochválil mě, že patřím asi mezi to 1% lidí, co to takhle nadefinuje a pak na to nezapomene) a chtěl po mně, jak bych upravil invarianty ČČ stromu pro relaxaci - ve zkratce tak, že si červenost nebo černost definujeme jako číslo a to pak budeme zvětšovat nebo zmenšovat, ale součet po cestě zůstane stejný). A ve zbytku času jsme se už bavili o implementacích, srovnání s paralelním přístupem třeba k B stromu a tak. Na to, jak jsem si myslel, že tahle otázka by mohla být definitivní, to dopadlo ještě myslím dobře. Jako další relaxovanou strukturu jsem mu nabídl binomiální haldy s tím, že tam bych toho věděl určitě víc. To ale nechtěl s tím, že kdybych se po ostatních otázkách nudil, tak mu to můřu vyložit. I s tím málem, co jsem věděl, bych tipoval, že mi dal tak 2. Jo a to nejlepší na závěr - už když ke mně šel, tak říkal, že aby nevypadal chytře, tak že taky nevěděl, co to je, tak si narychlo přečetl nějakej článek, aby věděl, co má zkoušet :-).
Takže bacha na tuhle otázku - klidně ji nějakým random přístupem můžete dostat, i když sám od sebe vám ji asi nikdo nedá.

Hešování - obecné principy + univerzální hešování (Hric)
Velmi tradiční, bez hešování státnice nejsou. Hlavní výhoda univerzálního je že nepředpokládám náhodnost dat (při tvorbě tabulky vždy vyberu náhodně funkci). Důkazy tolik nepotřeboval, stačilo jen že c-univerzální existuje.

Chování a analýza DS s paměťovou hierarchií (unknown) [2021]
Popsal jsem druhy paměti, Bloky, uložení polí, cache oblivious a další typy. Jako příklady jsem uvedl matice, jejich uložení a transpozice (tady zkoušející ještě
zmínil násobení matic) a stromy. U stromů jsem si nepamatoval jak se mají správně ukládat, vymyslel jsem svůj - subotimální - způsob uložení a ten mi byl odsouhlasen
včetně mnou odhadnutého počtu přístupů do paměti. Pak ze mě zkoušející asi 6 minut tahal s hromadou pomoci optimální cache-oblivious způsob uložení (rekurzivní
rozdělování stromu na menší struktury obdobně jak matice, nechápu že mi to trvalo tak dlouho).
